<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on λx.x</title>
    <link>/post/</link>
    <description>Recent content in Posts on λx.x</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Sep 2019 11:49:43 +0200</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Classe `string` e parserizzazione dell&#39;input in C&#43;&#43;: un (piccolissimo) tutorial</title>
      <link>/post/string/</link>
      <pubDate>Sun, 01 Sep 2019 11:49:43 +0200</pubDate>
      
      <guid>/post/string/</guid>
      <description>Questo post rappresenta una risorsa utile per gli studenti del corso di Algoritmi e Strutture Dati, DEMACS, University of Calabria.
 Lo scopo del seguente documento è fornire un quick&amp;rsquo;n&amp;rsquo;dirty tutorial sulla manipolazione e parserizzazione di stringhe in C++. Il tutorial è diviso in due parti:
 manipolazione: come definire, utilizzare e modificare istanze della classe string; parserizzazione: come parserizzare (to parse) del contenuto informativo rappresentato da stringhe.  Ovviamente questo documento non è (e non vuole essere) esplicativo.</description>
    </item>
    
    <item>
      <title>Come leggere da stdin senza un tappo</title>
      <link>/post/stdin/</link>
      <pubDate>Sun, 01 Sep 2019 11:47:52 +0200</pubDate>
      
      <guid>/post/stdin/</guid>
      <description>Questo post rappresenta una risorsa utile per gli studenti del corso di Algoritmi e Strutture Dati, DEMACS, University of Calabria.
 In C++ (avendo #include &amp;lt;string&amp;gt; e using namespace std):
string temp; // getline legge fino ad ogni \n while (getline(cin, temp)) { /* questo while gira fino * a quando il contenuto da * leggere non termina */ // do something... }  oppure
string temp; // cin legge fino ad ogni spazio while (cin &amp;gt;&amp;gt; temp) { /* questo while gira fino * a quando il contenuto da * leggere non termina */ // do something.</description>
    </item>
    
    <item>
      <title>Punti 2D e Serie Temporali</title>
      <link>/post/timeseries/</link>
      <pubDate>Sun, 01 Sep 2019 11:41:04 +0200</pubDate>
      
      <guid>/post/timeseries/</guid>
      <description>Questo post è parte del programma di tutoraggio per Fondamenti di Programmazione, DEMACS, University of Calabria.
 Si vuole creare un programmino in C++ per generare, manipolare e analizzare delle serie temporali (time series). Una serie temporale può essere espressa come una sequenza di punti in uno spazio 2D. Per esempio, la seguente sequenza
(0,23), (1,42), (2,-3), (3,11), (4,5)  rappresenta una serie temporale di 5 osservazioni (dall&amp;rsquo;istante temporale 0 all&amp;rsquo;istante temporale 4).</description>
    </item>
    
  </channel>
</rss>